name: Mobile App Robot Framework CI Manual Emulator Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  robot-tests:
    name: Test on Android API 30
    runs-on: ubuntu-latest

    env:
      ANDROID_AVD_HOME: $HOME/.config/.android/avd
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup environment
        run: |
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_AVD_HOME=$HOME/.config/.android/avd" >> $GITHUB_ENV
          echo "$ANDROID_HOME/emulator" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          pip install -r Libraries/requirement.txt
          pip install gdown
          npm install -g appium

      - name: Install Android SDK tools
        uses: android-actions/setup-android@v3

      - name: Accept licenses & install system image
        run: |
          sdkmanager --update
          yes | sdkmanager --licenses
          yes | sdkmanager "system-images;android-30;google_apis;x86_64"

      - name: Create AVD
        run: |
          echo "no" | avdmanager create avd -n test -k "system-images;android-30;google_apis;x86_64" -d pixel_3a

      - name: List AVDs after creation
        run: |
          echo "📃 Listing available AVDs:"
          avdmanager list avd
          ls -R $ANDROID_AVD_HOME

      - name: Start emulator
        run: |
          $ANDROID_HOME/emulator/emulator -avd test -no-window -no-audio -no-snapshot -no-boot-anim -accel off &
          EMU_PID=$!

          echo "⏳ Waiting for emulator to boot..."
          until [[ "$(adb shell getprop sys.boot_completed | tr -d '\r')" == "1" ]]; do
            sleep 5
          done
          adb devices
          echo "✅ Emulator booted"
          sleep 10

          until adb shell pm list packages > /dev/null 2>&1; do
            echo "Waiting for Package Manager..."
            sleep 5
          done
          echo "📦 Package Manager available"
          sleep 15

      - name: Disable animations (optional)
        run: |
          adb shell settings put global window_animation_scale 0.0 || true
          adb shell settings put global transition_animation_scale 0.0 || true
          adb shell settings put global animator_duration_scale 0.0 || true

      - name: Start Appium server
        run: |
          nohup appium > appium.log 2>&1 &
          sleep 10
      
      - name: Download APK from URL
        run: |
          URL=$(cat Libraries/apkUrl.txt)
          echo "Downloading APK from $URL"
          gdown --fuzzy "$URL" -O app.apk

      - name: Push APK & Install using install-create (stable)
        run: |
          echo "📦 Pushing APK..."
          adb push app.apk /data/local/tmp/app.apk

          echo "⏳ Waiting for Package Manager..."
          until adb shell pm path android >/dev/null 2>&1; do
            echo "Package manager not ready..."
            sleep 5
          done

          echo "⏳ Waiting for system settings provider..."
          until adb shell settings get global airplane_mode_on >/dev/null 2>&1; do
            echo "Settings provider not ready..."
            sleep 5
          done

          echo "✅ System services are ready. Installing..."
          FILESIZE=$(stat -c%s "app.apk")
          adb shell pm install-create -r -S $FILESIZE > session.txt
          SESSION=$(cat session.txt | grep -oP '(?<=\[).*(?=\])')

          adb exec-out dd if=app.apk | adb shell pm install-write -S $FILESIZE $SESSION base.apk
          adb shell pm install-commit $SESSION


      - name: Run Robot Framework Tests
        run: |
          robot -d results Test/ || true

      - name: Upload Robot Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-results-api-30
          path: results/